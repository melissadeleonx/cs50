O(n) - the running time for the linked list
Instead of prepending the list, we can append them, from left to right
O(n) - is still the running time or each insertion, as in the worst case we will have to look through all current elements.
We can use memory to go to the list more quickly

TREES
Binary search trees - another data structure that can be used to store data more efficiently such that it can be searched and retrieved.
You can imagine a sorted sequence of numbers.

DICTIONARIES
Dictionaries are another data structure.
Dictionaries, like actual book-form dictionaries that have a word and a definition, have a key and a value.
The holy grail of time complexity is O(1)
 or constant time. That is, the ultimate is for access to be instantaneous.

 HASHING
 Hashing is the idea of taking a value and being able to output a value that becomes a shortcut to it later.
 A hash function is an algorithm that reduces a larger value to something small and predictable. Generally, this function takes in an item you wish to add to your hash table, and returns an integer representing the array index in which the item should be placed.
A hash table is a fantastic combination of both arrays and linked lists. When implemented in code, a hash table is an array of pointers to nodes.

Collisions are when you add values to the hash table, and something already exists at the hashed location. In the above, collisions are simply appended to the end of the list.
Collisions can be reduced by better programming your hash table and hash algorithm. You can imagine an improvement upon the above as follows:

TRIES
ries are always searchable in constant time.
One downside to Tries is that they tend to take up a large amount of memory. 