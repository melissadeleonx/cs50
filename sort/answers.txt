sort1 uses: Bubble Sort

How do you know?: Going back to the charateristics of the Bubble Sort Algorithm, we can see on various running time
                that Sort 1 program becomes slower with larger files especially on unsorted arrays but shows evident
                changes with sorted files.

                The worst case scenario O(n^2) is visible with larger arrays of 10000 to 50000 textsts and declined
                even more with the reversed text files where each large element must be bubbled across the entire array
                to its correct position. Simultaneously, small elements also need to be bubbled back across the
                array.

                The best case scenario Î©(n) is the efficient attribute of the Sort 1(Bubble Sort). When we run the already
                sorted files, the steps changes to faster, more effective steps, skipping the first procedures of its worst case.
                Since the files are already in order, running time is also reduced and there is no need to swap elements.

                We can also observe that with sorted files, the best case scenario of Sort 1(Bubble Sort)
                exhibits comparable efficiency to Sort 2(which I presumed is the Merge Sort).

sort2 uses: Merge Sort

How do you know?: After conducting the timing tests, Sort 2 shows fast user time which
                corresponds with the characteristics of a Merge Sort. Aside from its efficiency, we can also
                observe that the time difference between real and sys time are very minimal. For every files,
                Sort 2(Merge Sort) displayed consistency in both of its worst and best case scenarios.

                Its worst case scenario is 0(n log n) has the fastest runtime among the three programs, tested with
                both small and larger arrays(files) as well as with the reversed files.

                The best case scenario0(n log n) follows the same efficient steps. It repeats the same procedure
                of splitting and recombining elements so the runtime are pretty similar between sorted and unsorted files,
                smaller or larger files.

sort3 uses: Selection Sort

How do you know?: Among these options of Sort Algorithms, Sort 3 has the slowest outcome like Selection Sort.
                The runtime for sorted and unsorted files are very similar, and it only  They consume more time than the other two sort
                programs. It means that with Selection Sort, we go through every single element of the array
                in order to confirm the smallest element and the same steps is repeated even if the arrays
                are already sorted. n times, once for each of n elements.

                Therefore, its worst and best case scenario O(n^2) is not a very ideal sort algorithm.
